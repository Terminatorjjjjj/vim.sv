# if statement
snippet if
	if (${1}) begin
		${0}
	end
# If/else statements
snippet ife
	if (${1}) begin
		${2}
	end
	else begin
		${3}
	end
# Else if statement
snippet eif
	else if (${1}) begin
		${0}
	end
#Else statement
snippet el
	else begin
		${0}
	end
# While statement
snippet wh
	while (${1}) begin
		${0}
	end
# Repeat Loop
snippet rep
	repeat (${1}) begin
		${0}
	end
# Case statement
snippet case
	case (${1:/* variable */})
		${2:/* value */}: begin
			${3}
		end
		default: begin
			${4}
		end
	endcase
# CaseZ statement
snippet casez
	casez (${1:/* variable */})
		${2:/* value */}: begin
			${3}
		end
		default: begin
			${4}
		end
	endcase
# Always block
snippet alw
	always @(${1:/* sensitive list */}) begin
		${0}
	end
# Sequential logic
snippet alp
	always @(posedge ${1:clk}) begin
		${0}
	end
# Sequential logic with rst
snippet alpr
	always @(posedge ${1:clk} or negedge ${2:rst_n}) begin
		if (!$2) begin
			${0}
		end
		else begin
		end
	end
# Generate
snippet gen
	generate
	${0}
	endgenerate

# Module block
snippet mod
	module ${1:name} (
		${0}
	);


	endmodule // $1
# For with interger
snippet fori
	for (int ${2:i}=0; $2<${1:count}; $2${3:++}) begin
		${0}
	end
# For with genvar
snippet forn
	for (${1:n}=0; $1<${2:count}; $1${3:++})
	begin : ${4:label}
		${0}
	end
# Forever
snippet forev
	forever begin
		${0}
	end
# Function
snippet fun
	function ${1:void} ${2:name}(${3});
		${0}
	endfunction
# Task
snippet task
	task ${1:name}(${2});
		${0}
	endtask
# Initial 
snippet ini
	initial begin
		${0}
	end
# typedef struct packed
snippet tdsp
	typedef struct packed {
		int ${2:data};
	} ${1:name};
# typedef eum
snippet tde
	typedef enum ${2:logic[15:0]}
	{
		${3:REG = 16'h0000}
	} ${1:my_dest_t};
# Timescale
snippet ts
	`timescale ${1:1ns}/${2:10ps}${0}
# Include
snippet inc
	`include "${1}"${0}
# Define
snippet def
	`define ${1} ${2}
# If define
snippet ifd
	`ifdef ${1:macro}
	${0}
	\`endif // $1

# If define / else
snippet ifde
	`ifdef ${1:macro}
	${0}
	\`else // $1
	\`endif // $1
# FF D-pin/Q-pin declaration
snippet rdq
	reg ${1}${2:reg}_q, $2_d;${0}
# Input port
snippet inp
	input ${1}i_${2:port},${0}
# Output port
snippet out
	output ${1}o_${2:port},${0}
# In/out port
snippet ino
	inout ${1}io_${2:port},${0}
# Non-blocking assignment
snippet as<
	${1:reg}_q <= ${2:delay} $1_d;${0}
# Blocking assignment
snippet as=
	${1:reg}_d = $1_q;${0}
# Wire assignment
snippet ass
	assign ${1:name} = ${2:value};${0}
# Wire assignment with defualt value
snippet wir
	wire ${1:#:nbit} ${2:name} = ${3:value};${0}
# Global Parameter
snippet gpa
	parameter ${1:name} = ${2:value}${3:,}${0}
# Local parameter
snippet lpa "localparam" b
	localparam ${1:name} = ${2:value}${3:;}${0}
# Dumpfile
snippet df
	$dumpfile("${1:`expand("%:r")`}.fsdb");${0}
# Dumpvars
snippet dv
	$dumpvars(${1:0}, ${2:`expand("%:r")`});${0}
# Display
snippet display
	$display("${1}", ${2});
# Strobe
snippet strobe
	$strobe("${1}", ${2});
# Parameterized bit operand: 0
snippet pa0
	{${1:(pwidth)}{1'b0}}
# Parameterized bit operand: 1
snippet pa1
	{{(${1:pwidth}-1){1'b0}}, 1'b1}
# vim: ts=8
